# coding:utf-8
# 数据类型和变量


# 数据类型

# 整数
# 十进制：1，-8080
# 十六进制：0x前缀 + 0-9,a-f；0xff00

# 浮点数
# 数学写法：1.23
# 科学计数法：1.23e9，1.2e-2

# 整数和浮点数在计算机内部存储的方式是不同的
# 整数运算永远是精确的(除法也是精确的)
# 浮点数运算可能会有四舍五入的误差

# 字符串
# 以单引号(')或双引号(")括起来的的任意文本
# 注意：''和""本身只是一种表示方式，不是字符串的一部分
# 因此'abc'只有a、b、c这3个字符
# 如果'本身也是一个字符，那就可以用""括起来
# "I'm OK"包含的字符是I、'、m、空格、O、K这6个字符
# 如果字符串内部既包含'又包含"，可以用转义字符\来标识
print('I\'m \"OK\"!')
# I'm "OK"!
print('\\')
# \
# 如果字符串里面有很多字符都需要转义，就需要加很多\，为了简化，Python允许用r''表示''内部的字符串默认不转义
print(r'\\\ok\\')
# \\\ok\\
# 如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''string'''的格式表示多行内容
print('''line1
line2
line3
''')
# line1
# line2
# line3
# 在交互式命令行内输入，注意在输入多行内容时，提示符由>>>变为...(是提示符，不是代码的一部分)
print(r'''hello,\n
world''')
# hello,\n
# world

# 布尔值
# 只有True、False两种值
# 直接用True、False表示布尔值
print(True)
# 通过布尔运算计算表示布尔值
print(2 > 3)
# 布尔值可以用and、or和not运算
# and：与运算，只有所有都为True，运算结果才是True
# or：或运算，只要其中有一个为True，运算结果就是True
# not：非运算，是一个单目运算符，把True变成False，False变成True
# 布尔值通常用在条件判断中，比如：
age = 20
if age >= 18:
    print('adult')
else:
    print('teenager')

# 空值
# Python里一个特殊的值，用None表示；None不能理解为0，因为0是有意义的，而None是一个特殊的空值


# 变量

# 变量名：必须是大小写英文、数字、_的组合，且不能用数字开头
a = 1
# 变量a是一个整数
t_007 = 'T007'
# 变量t_007是一个字符串
Answer = True
# Answers
# 变量本身类型不固定的语言称之为动态语言，如Python
# 与之对应的是静态语言，静态语言在定义变量时必须指定变量类型，如果赋值的时候类型不匹配，就会报错
# 理解变量在计算机内存中的表示
b = 'b'
# 这Python解释器干了2件事情
# 1---在内存中创建了一个'b'字符串
# 2---在内存中创建了一个名为b的变量，并把它指向'b'
str_1 = 'abc'
# 解释器创建了字符串'abc'和变量str_1，并把a指向'abc'
str_2 = str_1
# 解释器创建了变量str_2，并把str_2指向str_1指向的字符串'abc'
str_1 = 'xyz'
# 解释器创建了字符串'xyz'，并把str_1的指向改为'xyz'，但v并没有更改
print('str_1 =', str_1)
# 'xyz'
print('str_2 =', str_2)
# 'abc'
num_1 = 1
num_2 = num_1
num_1 = 2
print('num_1 =', num_1)
# 2
print('num_2 =', num_2)
# 1

# 常量
# 常量：不能变的变量，比如常用的数学常数π就是一个常量
# 在Python中，通常用全部大写的变量名表示常量
PI = 3.1415926
# 事实上PI仍然是一个变量，Python根本没有任何机制保证PI不会被改变
# 所以，用全部大写的变量名表示常量只是一个习惯上的用法


# 小结
# Python支持多种数据类型，在计算机内部，可以把任何数据都看成一个"对象"
# 变量就是在程序中用来指向这些数据对象的，对变量的赋值就是把数据和变量给关联起来
# 对变量赋值x = y是把变量x指向真正的对象，该对象是变量y所指向的；随后对变量y的赋值不影响变量x的指向
# 注意Python的整数、浮点数没有大小限制，但是超出一定范围就直接表示伪inf(无限大)